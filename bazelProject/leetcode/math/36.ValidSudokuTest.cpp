#include "36.ValidSudoku.h"
#include "gtest/gtest.h"
#include <vector>


TEST(case_1,content)
{
    std::vector<std::vector<char>> board = 
    {{'5','3','.','.','7','.','.','.','.'}
    ,{'6','.','.','1','9','5','.','.','.'}
    ,{'.','9','8','.','.','.','.','6','.'}
    ,{'8','.','.','.','6','.','.','.','3'}
    ,{'4','.','.','8','.','3','.','.','1'}
    ,{'7','.','.','.','2','.','.','.','6'}
    ,{'.','6','.','.','.','.','2','8','.'}
    ,{'.','.','.','4','1','9','.','.','5'}
    ,{'.','.','.','.','8','.','.','7','9'}
    };

    bool ans = true;
    EXPECT_EQ(isValidSudoku(board), ans);
    EXPECT_EQ(isValidSudoku1(board), ans);
}

TEST(case_2,content)
{
    std::vector<std::vector<char>> board = 
    {{'8','3','.','.','7','.','.','.','.'}
    ,{'6','.','.','1','9','5','.','.','.'}
    ,{'.','9','8','.','.','.','.','6','.'}
    ,{'8','.','.','.','6','.','.','.','3'}
    ,{'4','.','.','8','.','3','.','.','1'}
    ,{'7','.','.','.','2','.','.','.','6'}
    ,{'.','6','.','.','.','.','2','8','.'}
    ,{'.','.','.','4','1','9','.','.','5'}
    ,{'.','.','.','.','8','.','.','7','9'}
    };

    bool ans = false;
    EXPECT_EQ(isValidSudoku(board), ans);
    EXPECT_EQ(isValidSudoku1(board), ans);
}

TEST(case_3,content)
{
    std::vector<std::vector<char>> board = 
    {{'.','.','4','.','.','.','6','3','.'}
    ,{'.','.','.','.','.','.','.','.','.'}
    ,{'5','.','.','.','.','.','.','9','.'}
    ,{'.','.','.','5','6','.','.','.','.'}
    ,{'4','.','3','.','.','.','.','.','1'}
    ,{'.','.','.','7','.','.','.','.','.'}
    ,{'.','.','.','5','.','.','.','.','.'}
    ,{'.','.','.','.','.','.','.','.','.'}
    ,{'.','.','.','.','.','.','.','.','.'}};

    bool ans = false;
    EXPECT_EQ(isValidSudoku(board), ans);
    EXPECT_EQ(isValidSudoku1(board), ans);
}

TEST(case_4,content)
{
    std::vector<std::vector<char>> board = 
    {{'.','.','.','.','5','.','.','1','.'}
    ,{'.','4','.','3','.','.','.','.','.'}
    ,{'.','.','.','.','.','3','.','.','1'}
    ,{'8','.','.','.','.','.','.','2','.'}
    ,{'.','.','2','.','7','.','.','.','.'}
    ,{'.','1','5','.','.','.','.','.','.'}
    ,{'.','.','.','.','.','2','.','.','.'}
    ,{'.','2','.','9','.','.','.','.','.'}
    ,{'.','.','4','.','.','.','.','.','.'}};

    bool ans = false;
    EXPECT_EQ(isValidSudoku(board), ans);
    EXPECT_EQ(isValidSudoku1(board), ans);
}